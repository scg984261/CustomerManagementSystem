//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CDBContext : DbContext
    {
        public CDBContext()
            : base("name=CDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
    
        public virtual ObjectResult<InsertCustomer_Result> InsertCustomer(string companyName, string businessContact, string emailAddress, string contactNumber)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var businessContactParameter = businessContact != null ?
                new ObjectParameter("BusinessContact", businessContact) :
                new ObjectParameter("BusinessContact", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCustomer_Result>("InsertCustomer", companyNameParameter, businessContactParameter, emailAddressParameter, contactNumberParameter);
        }
    
        public virtual ObjectResult<SelectAllCustomers_Result> SelectAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllCustomers_Result>("SelectAllCustomers");
        }
    
        public virtual ObjectResult<SelectCustomerById_Result> SelectCustomerById(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomerById_Result>("SelectCustomerById", customerIdParameter);
        }
    
        public virtual ObjectResult<InsertService_Result> InsertService(string name, Nullable<decimal> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertService_Result>("InsertService", nameParameter, priceParameter);
        }
    
        public virtual ObjectResult<InsertSubscription_Result> InsertSubscription(Nullable<int> customerId, Nullable<int> serviceId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertSubscription_Result>("InsertSubscription", customerIdParameter, serviceIdParameter);
        }
    
        public virtual ObjectResult<SelectServiceById_Result> SelectServiceById(Nullable<int> serviceId)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectServiceById_Result>("SelectServiceById", serviceIdParameter);
        }
    
        public virtual ObjectResult<SelectSubscriptionById_Result> SelectSubscriptionById(Nullable<int> subscriptionId)
        {
            var subscriptionIdParameter = subscriptionId.HasValue ?
                new ObjectParameter("SubscriptionId", subscriptionId) :
                new ObjectParameter("SubscriptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSubscriptionById_Result>("SelectSubscriptionById", subscriptionIdParameter);
        }
    
        public virtual ObjectResult<UpdateServicePrice_Result> UpdateServicePrice(Nullable<int> serviceId, Nullable<decimal> newPrice)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateServicePrice_Result>("UpdateServicePrice", serviceIdParameter, newPriceParameter);
        }
    }
}
